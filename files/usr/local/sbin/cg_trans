#!/bin/bash

# --------- FUNCTIONS --------

function log() {

    local prio

    # Set logging level depending on type.
    case "${2}" in
        info) prio="auth.info" ;;
        debug) prio="auth.debug" ;;
        err) prio="auth.err" ;;
        *) prio="auth.info" ;;
    esac

        # Skip debug output, if debug setting is 0.
        [ "${2}" = "debug" -a ${debug} == 0 ] && return 0

        # Log message to syslog.
        logger -p "${prio}" -t "${0##*/}" "$1"

        return 0
}


# ------------ MAIN ----------

# Some defaults.
unset cgroup
debug=0
sapuser_file="/etc/SAPusers"
default_cgroup="sap.slice/sapinit.service"
default_SAP_group="sapsys"

# Check parameters. For now only: debug.
[ "${1}" = "debug" ] && debug=1

# We only handle opening a session.
if [ "${PAM_TYPE}" != "open_session" ] ; then
        log "$0: PAM type ${PAM_TYPE} not handled by us." info
        exit 0
fi

# We allow systemd to have a user instance.
if [ "${PAM_SERVICE}" = "systemd-user" ] ; then
        log "Not migrating systemd user instance PAM session." debug
        exit 0
fi

# ---
# Now we determine the cgroup setting for the user, in that order:
#        - cgroup= entry in GECOS filed of user
#        - user or group entry in /etc/SAPusers
#        - membership of default_SAP_group
# First matching rule wins!
# ---

# Check if target user has a cgroup entry in GECOS field.
if [ -z "${cgroup}" ] ; then
        gecos=$(getent passwd | grep -m 1 "^${PAM_USER}:" | cut -d ':' -f 5)
        IFS=',' read -a fields <<< "$gecos"
        for ((i=0;i<=${#fields[*]};i++)) ; do
                [[ "${fields[i]}" =~ ^cgroup= ]] || continue
                cgroup="${fields[i]#*=}"
        done
        [ -z "${cgroup}" ] &&
                log "No cgroup entry in GECOS field of target user \"${PAM_USER}\"." debug
fi

# Check SAP user file, if target user is listed with a cgroup entry.
if [ -z "${cgroup}" ] ; then
        if [ -f "${sapuser_file}" ] ; then
                entry=$(grep -m 1 "^${PAM_USER}:" "${sapuser_file}")
                cgroup="${entry#*:}"
                [ -z "${cgroup}" ] &&
                        log "No cgroup entry in \"${sapuser_file}\" for target user \"${PAM_USER}\"." debug
        else
                log "No SAP user file \"${sapuser_file}\" found." debug
        fi
fi

# Check SAP user file, if one of the target users groups is listed with a cgroup entry.
if [ -z "${cgroup}" ] ; then
        if [ -f "${sapuser_file}" ] ; then
                for group in $(id -nG "${PAM_USER}") ; do
                        entry=$(grep -m 1 "^@${group}:" "${sapuser_file}")
                        cgroup="${entry#*:}"
                        [ -z "${cgroup}" ] &&
                                log "No cgroup entry in \"${sapuser_file}\" for group \"${group}\" of target user \"${PAM_USER}\"." debug
                done
        else
                log "No SAP user file \"${sapuser_file}\" found." debug
        fi
fi

# Check if user is member of the default_SAP_group.
if [ -z "${cgroup}" ] ; then
  groups=$(id -nG "${PAM_USER}")
  if [[ "${groups}" =~ (^| )${default_SAP_group}( |$) ]] ; then
    cgroup="${default_cgroup}"
  else
    log "User \"${PAM_USER}\" is not a member of group \"${default_SAP_group}\"." debug
    fi
fi

# ---
# If we do not have a cgroup for the user by now, there is nothing we can do.
# Otherwise we are moving the parent process into the given cgroup (so it exists).
# ---

# No cgroup -->  Finish.
if [ -z "${cgroup}" ] ; then
        log "No cgroup for target user ${PAM_USER}." info
        exit 0
else
        log "cgroup for target user ${PAM_USER} is ${cgroup}." info
fi

# Moving parent into cgroup.
cgroup_path="/sys/fs/cgroup/${cgroup}"
if [ ! -d "${cgroup_path}" ] ; then
        log "Requested cgroup \"${cgroup_path}\" does not exist! Exiting." err
        exit 1
fi
if echo ${PPID} > "${cgroup_path}/cgroup.procs" ; then
        log "PID ${PPID} moved into \"${cgroup_path}\"." info
else
        log "Moving PID ${PPID} into \"${cgroup_path}\" failed! Exiting." err
        exit 1
fi

# Bye.
exit 0

